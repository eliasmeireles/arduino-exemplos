import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();

  static Locale? _locale;
  static bool _shouldReload = false;

  static Locale? get locale => _locale;

  static set locale(Locale? newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate =
      GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback? onLocaleChanged;

  static I18n? of(BuildContext context) =>
      Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Arduino Websocket"
  String get app_name => "Arduino Websocket";

  /// "Home"
  String get home => "Home";

  /// "Não foi possível completar a solicitação, por favor, tente novamente!"
  String get could_not_complete_the_request =>
      "Não foi possível completar a solicitação, por favor, tente novamente!";

  /// "Não foi possível efetuar o login com os dados informados!"
  String get login_failed =>
      "Não foi possível efetuar o login com os dados informados!";

  /// "Login realizado com sucesso."
  String get login_successful => "Login realizado com sucesso.";

  /// "Sua conta foi criada com sucesso"
  String get userAccountCreatedMessage => "Sua conta foi criada com sucesso";

  /// "O email informado não está mais disponível."
  String get duplicatedEmail => "O email informado não está mais disponível.";

  /// "E-mail"
  String get email => "E-mail";

  /// "Cadastre-se"
  String get newRegister => "Cadastre-se";

  /// "Nome"
  String get name => "Nome";

  /// "Senha"
  String get password => "Senha";

  /// "Login"
  String get doLogin => "Login";

  /// "Cadastrar"
  String get signIn => "Cadastrar";

  /// "Não foi possível completar a solicitação, verifique sua conexão com a internet."
  String get verify_the_internet_connection =>
      "Não foi possível completar a solicitação, verifique sua conexão com a internet.";

  /// "Nenhuma informação a ser mostrada por aqui"
  String get no_result_found => "Nenhuma informação a ser mostrada por aqui";

  /// "Perfil"
  String get profile => "Perfil";

  /// "Carregando..."
  String get loading => "Carregando...";

  /// "Cancelar"
  String get cancel => "Cancelar";

  /// "CPF/CNPJ"
  String get cpfCnpj => "CPF/CNPJ";

  /// "Celular"
  String get cellphone => "Celular";

  /// "Telefone"
  String get phoneNumber => "Telefone";

  /// "Salvar"
  String get save => "Salvar";

  /// "Pesquisar"
  String get search => "Pesquisar";

  /// "Continuar"
  String get textContinue => "Continuar";

  /// "A senha deve conter ao menos, um caractere especial  exemplo @, uma letra maiuscula e uma minuscula e número"
  String get weakPasswordMessage =>
      "A senha deve conter ao menos, um caractere especial  exemplo @, uma letra maiuscula e uma minuscula e número";

  /// "Deseja realmente fazer o logout?"
  String get confirmationLogoutMessage => "Deseja realmente fazer o logout?";

  /// "Sim"
  String get yes => "Sim";
}

class _I18n_pt_BR extends I18n {
  const _I18n_pt_BR();
}

class GeneratedLocalizationsDelegate
    extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[Locale("pt", "BR")];
  }

  LocaleResolutionCallback resolution({Locale? fallback}) {
    return (Locale? locale, Iterable<Locale> supported) {
      if (locale != null && isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode =
        I18n._locale != null ? I18n._locale!.languageCode : "";
    if ("pt_BR" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_BR());
    } else if ("pt" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_pt_BR());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}
